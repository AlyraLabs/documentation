{
  "openapi": "3.1.0",
  "info": {
    "title": "BlackHole Quotes API",
    "description": "Quote endpoint for token transfers (same-chain or cross-chain). Returns estimation and executable calldata.",
    "version": "1.0.0"
  },
  "servers": [
    { "url": "https://api.alyra.finance" }
  ],
  "paths": {
    "/v1/quotes": {
      "get": {
        "summary": "Get a quote for a token transfer",
        "description": "",
        "parameters": [
          {
            "name": "originChainId",
            "in": "query",
            "required": true,
            "description": "The sending chain id",
            "schema": { "type": "number" }
          },
          {
            "name": "destinationChainId",
            "in": "query",
            "required": true,
            "description": "The receiving chain id",
            "schema": { "type": "number" }
          },
          {
            "name": "originCurrency",
            "in": "query",
            "required": true,
            "description": "The token address that should be transferred",
            "schema": { "type": "string" }
          },
          {
            "name": "destinationCurrency",
            "in": "query",
            "required": true,
            "description": "The token address that should be transferred to",
            "schema": { "type": "string" }
          },
          {
            "name": "senderAddress",
            "in": "query",
            "required": true,
            "description": "The sending wallet address",
            "schema": { "type": "string" }
          },
          {
            "name": "receiverAddress",
            "in": "query",
            "required": false,
            "description": "The receiving wallet address. If none is provided, the fromAddress will be used",
            "schema": { "type": "string" }
          },
          {
            "name": "amount",
            "in": "query",
            "required": true,
            "description": "The amount that should be sent including all decimals (e.g. 1000000 for 1 USDC with 6 decimals)",
            "schema": { "type": "string" }
          },
          {
            "name": "integrator",
            "in": "query",
            "required": false,
            "description": "A string containing tracking information about the integrator of the API",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Quote response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/QuoteResponse" },
                "examples": {
                  "success": {
                    "summary": "Example quote",
                    "value": {
                      "inputAmount": "1000000",
                      "outputAmount": "998400",
                      "tool": "relay-router",
                      "calldata": [
                        {
                          "chainId": 1,
                          "to": "0xRouterContract",
                          "data": "0xabcdef...",
                          "value": "0",
                          "gasLimit": "210000"
                        }
                      ],
                      "fees": [
                        {
                          "name": "Bridge fee",
                          "amount": "1200",
                          "currency": "USDC"
                        },
                        {
                          "name": "Service fee",
                          "amount": "300",
                          "currency": "USDC"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request (missing or invalid parameters)",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" },
                "examples": {
                  "missingParam": {
                    "value": {
                      "error": 400,
                      "message": "originCurrency is required"
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable quote (route not found or unsupported pair)",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" },
                "examples": {
                  "noRoute": {
                    "value": {
                      "error": 422,
                      "message": "No available route for given parameters"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        }
      }
    },
    "/v1/chains": {
      "get": {
        "summary": "List supported chains",
        "description": "Returns all supported chains. Optionally filter by chain types.",
        "parameters": [
          {
            "name": "chainTypes",
            "in": "query",
            "required": false,
            "description": "List of chain types to include (EVM,SVM).",
            "schema": {
              "type": "string",
              "examples": ["EVM", "EVM, SVM"]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of chains",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ChainsResponse" },
                "examples": {
                  "success": {
                    "summary": "Example chains response",
                    "value": {
                      "chains": [
                        {
                          "key": "eth",
                          "name": "Ethereum",
                          "chainType": "EVM",
                          "id": 1,
                          "idHex": "0x1",
                          "mainnet": true,
                          "logoURI": "https://raw.githubusercontent.com/AlyraLabs/types/main/src/assets/icons/chains/ethereum.svg",
                          "tokenlistUrl": "https://gateway.ipfs.io/ipns/tokens.uniswap.org",
                          "multicallAddress": "0xcA11bde05977b3631167028862bE2a173976CA11",
                          "rpcUrls": [
                            "https://ethereum-rpc.publicnode.com",
                            "https://eth.drpc.org"
                          ],
                          "blockExplorerUrls": "https://etherscan.io/",
                          "nativeToken": {
                            "address": "0x0000000000000000000000000000000000000000",
                            "decimals": 18,
                            "symbol": "ETH",
                            "chainId": 1,
                            "coinKey": "ETH",
                            "name": "ETH",
                            "logoURI": "https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/ethereum/assets/0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2/logo.png"
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "QuoteResponse": {
        "type": "object",
        "required": ["inputAmount", "outputAmount", "tool", "calldata"],
        "properties": {
          "inputAmount": {
            "type": "string",
            "description": "The amount that should be transferred including all decimals"
          },
          "outputAmount": {
            "type": "string",
            "description": "The estimated resulting amount of the destinationCurrency including all decimals"
          },
          "tool": {
            "type": "string",
            "description": "The tool used for the transaction"
          },
          "calldata": {
            "type": "array",
            "description": "The transaction data that can be triggered using a wallet provider",
            "items": { "$ref": "#/components/schemas/CalldataItem" }
          },
          "fees": {
            "type": "array",
            "description": "Fees included in the transfer",
            "items": { "$ref": "#/components/schemas/Fee" }
          }
        }
      },
      "CalldataItem": {
        "type": "object",
        "description": "Execution payload; fields may vary by chain/tool",
        "properties": {
          "to": { "type": "string", "description": "Target contract/address" },
          "value": { "type": "string", "description": "Native value to send" },
          "data": { "type": "string", "description": "Calldata hex" }
        },
        "additionalProperties": true
      },
      "Fee": {
        "type": "object",
        "additionalProperties": true
      },
      "Error": {
        "type": "object",
        "required": ["error", "message"],
        "properties": {
          "error": { "type": "integer", "format": "int32" },
          "message": { "type": "string" }
        }
      },
      "ChainsResponse": {
        "type": "object",
        "properties": {
          "chains": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/Chain" }
          }
        }
      },
      "Chain": {
        "type": "object",
        "properties": {
          "key": { "type": "string", "description": "Short chain key (e.g., eth, opt)" },
          "name": { "type": "string", "description": "Full name of the blockchain network"},
          "chainType": { "type": "string", "description": "Type of chain: EVM, SVM" },
          "id": { "type": "integer", "description": "Numeric chain ID used in RPC and contracts" },
          "idHex": { "type": "string", "description": "Hexadecimal representation of the chain ID" },
          "mainnet": { "type": "boolean", "description": "Indicates whether the chain is a mainnet" },
          "logoURI": { "type": "string", "format": "uri", "description": "URL of the chain logo image" },
          "tokenlistUrl": { "type": "string", "format": "uri", "description": "URL pointing to the token list for this chain" },
          "multicallAddress": { "type": "string", "description": "Address of the multicall contract" },
          "rpcUrls": {
            "type": "array",
            "items": { "type": "string", "format": "uri" },
            "description": "List of RPC endpoints for accessing the chain"
          },
          "blockExplorerUrls": { "type": "string", "description": "URL of the main block explorer for the chain" },
          "nativeToken": { "$ref": "#/components/schemas/NativeToken", "description": "Native token used for gas payments on this chain" }
        },
        "required": ["key", "name", "chainType", "id", "idHex", "mainnet"]
      },
      "NativeToken": {
        "type": "object",
        "properties": {
          "address": { "type": "string", "description": "Token address (0x0 for native coins like ETH)" },
          "decimals": { "type": "integer", "description": "Number of decimals used by the token" },
          "symbol": { "type": "string", "description": "Ticker symbol of the token (e.g., ETH)" },
          "chainId": { "type": "integer", "description": "Chain ID to which the token belongs" },
          "coinKey": { "type": "string", "description": "Short identifier for the token used across chains" },
          "name": { "type": "string", "description": "Full name of the token" },
          "logoURI": { "type": "string", "format": "uri", "description": "URL of the token logo image" }
        },
        "required": ["address", "decimals", "symbol", "chainId", "coinKey", "name"]
      }

    }
  }
}
